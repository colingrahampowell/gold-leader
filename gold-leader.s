;
; File generated by cc65 v 2.17 - Git 60b9ea3
;
	.fopt		compiler,"cc65 v 2.17 - Git 60b9ea3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_PALETTES
	.export		_ATTRIBUTES
	.importzp	_FrameCount
	.export		_index
	.export		_attr_offset
	.export		_ppu_addr
	.export		_ppu_data
	.export		_ppu_data_size
	.export		_TEXT
	.export		_WritePPU
	.export		_ResetScroll
	.export		_EnablePPU
	.export		_main

.segment	"RODATA"

_PALETTES:
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$14
_ATTRIBUTES:
	.byte	$00
	.byte	$90
	.byte	$40
	.byte	$E0
	.byte	$80
	.byte	$40
	.byte	$20
	.byte	$D0
	.byte	$40
	.byte	$20
	.byte	$90
	.byte	$C0
_TEXT:
	.byte	$48,$65,$6C,$6C,$6F,$20,$57,$6F,$72,$6C,$64,$21,$00

.segment	"BSS"

.segment	"ZEROPAGE"
_index:
	.res	1,$00
_attr_offset:
	.res	1,$00
_ppu_addr:
	.res	2,$00
_ppu_data:
	.res	2,$00
_ppu_data_size:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ WritePPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_WritePPU: near

.segment	"CODE"

;
; PPU_ADDRESS = (uint8_t) (ppu_addr >> 8);  // right shift to write only hi-byte
;
	lda     _ppu_addr+1
	sta     $2006
;
; PPU_ADDRESS = (uint8_t) (ppu_addr);  // now write lo byte
;
	lda     _ppu_addr
	sta     $2006
;
; for(index = 0; index < ppu_data_size; ++index){
;
	lda     #$00
	sta     _index
L0080:	lda     _index
	cmp     _ppu_data_size
	bcs     L002B
;
; PPU_DATA = ppu_data[index];
;
	lda     _ppu_data
	ldx     _ppu_data+1
	ldy     _index
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     $2007
;
; for(index = 0; index < ppu_data_size; ++index){
;
	inc     _index
	jmp     L0080
;
; }
;
L002B:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ ResetScroll (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ResetScroll: near

.segment	"CODE"

;
; SCROLL = 0; // horizontal
;
	lda     #$00
	sta     $2005
;
; SCROLL = 0; // vertical
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ EnablePPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_EnablePPU: near

.segment	"CODE"

;
; PPU_CTRL = 0x90;  // 0x90 --> 1001 0000
;
	lda     #$90
	sta     $2000
;
; PPU_MASK = 0x1e; // 0x1e = 0001 1110 
;
	lda     #$1E
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; PPU_CTRL = 0; // zero-out PPU_CTRL (see below)
;
	lda     #$00
	sta     $2000
;
; PPU_MASK = 0; // zero-out PPU_MASK (see below)
;
	sta     $2001
;
; ppu_addr = PPU_PALETTE; // 0x3f00: palette memory
;
	ldx     #$3F
	sta     _ppu_addr
	stx     _ppu_addr+1
;
; ppu_data = PALETTES; 
;
	lda     #<(_PALETTES)
	sta     _ppu_data
	lda     #>(_PALETTES)
	sta     _ppu_data+1
;
; ppu_data_size = sizeof(PALETTES);
;
	lda     #$10
	sta     _ppu_data_size
;
; WritePPU();
;
	jsr     _WritePPU
;
; ppu_addr = PPU_NAMETABLE_0 + TEXT_OFFSET;
;
	ldx     #$21
	lda     #$CA
	sta     _ppu_addr
	stx     _ppu_addr+1
;
; ppu_data = TEXT;
;
	lda     #<(_TEXT)
	sta     _ppu_data
	lda     #>(_TEXT)
	sta     _ppu_data+1
;
; ppu_data_size = sizeof(TEXT);
;
	lda     #$0D
	sta     _ppu_data_size
;
; WritePPU();
;
	jsr     _WritePPU
;
; ppu_addr = PPU_ATTRIB_TABLE_0 + TEXT_ATTR_OFFSET;
;
	ldx     #$23
	lda     #$DA
	sta     _ppu_addr
	stx     _ppu_addr+1
;
; ppu_data = ATTRIBUTES;
;
	lda     #<(_ATTRIBUTES)
	sta     _ppu_data
	lda     #>(_ATTRIBUTES)
	sta     _ppu_data+1
;
; ppu_data_size = NUM_ATTRS;
;
	lda     #$04
	sta     _ppu_data_size
;
; WritePPU();
;
	jsr     _WritePPU
;
; ResetScroll();
;
	jsr     _ResetScroll
;
; EnablePPU();
;
	jsr     _EnablePPU
;
; attr_offset = NUM_ATTRS;
;
	lda     #$04
	sta     _attr_offset
;
; if( FrameCount == FRAMES_PER_SEC * 4 ) {
;
L0081:	lda     _FrameCount
	cmp     #$F0
	bne     L0081
;
; ppu_data = ATTRIBUTES + attr_offset;
;
	lda     _attr_offset
	clc
	adc     #<(_ATTRIBUTES)
	sta     _ppu_data
	lda     #$00
	adc     #>(_ATTRIBUTES)
	sta     _ppu_data+1
;
; WritePPU();
;
	jsr     _WritePPU
;
; attr_offset += NUM_ATTRS;
;
	lda     #$04
	clc
	adc     _attr_offset
	sta     _attr_offset
;
; if( attr_offset == sizeof(ATTRIBUTES)) {
;
	cmp     #$0C
	bne     L0077
;
; attr_offset = 0;
;
	lda     #$00
	sta     _attr_offset
;
; ResetScroll();
;
L0077:	jsr     _ResetScroll
;
; FrameCount = 0;
;
	lda     #$00
	sta     _FrameCount
;
; while (1) {
;
	jmp     L0081

.endproc

